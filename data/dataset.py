#!/usr/bin/env python
# -*- coding: UTF-8 -*-
"""
@Project    : malware_classification
@File       : dataset.py
@IDE        : PyCharm
@Author     : Huang Hua
@Date       : 2021/9/6 18:38
"""
import numpy as np
import pandas as pd
import numpy
from PIL import Image
import binascii
import os
import h5py


def get_matrix_from_bin(filename, width=512):
    with open(filename, mode='rb') as f:
        content = f.read()
    hex_str = binascii.hexlify(content)
    fh = numpy.array([int(hex_str[i:i + 2], 16) for i in range(0, len(hex_str), 2)])
    rn = len(fh) // width
    fh = numpy.reshape(fh[:rn * width], (-1, width))
    fh = numpy.uint8(fh)
    return fh


def get_matrix(filename, width=512, noise=False):
    img = Image.fromarray(get_matrix_from_bin(filename, width))
    img = img.convert("RGB").resize((width, width))
    img = np.array(img, dtype=float)
    if noise:
        mean = 0
        var = 0.001
        noise = np.random.normal(mean, var ** 0.5, img.shape)
        img = img + noise
        # Image.fromarray(np.uint8(img)).show()
    # img.show()
    # return numpy.expand_dims(numpy.array(img.resize((width, width))), 0)
    return numpy.transpose(numpy.array(img), (2, 0, 1))


def count_class(file_path):
    data = pd.read_csv(file_path, header=0)
    x = []
    y = []
    name = []
    data_dict = {}
    for class_id in pd.unique(data['family']):
        print(class_id, len(data[data['family'] == class_id]))
        x.append(class_id)
        y.append(len(data[data['family'] == class_id]))
        name.append(data['filename'])
        print(data['filename'])
        data_dict[class_id] = len(data[data['family'] == class_id])
    return data_dict


def get_train_data(file_path):
    data_dict = count_class(file_path)
    print(data_dict)
    data = pd.read_csv(file_path, header=0)
    x_ = []
    y_ = []
    path = "/user-data/train/pe"
    for index, row in data.iterrows():
        if index > 10:
            break
        if data_dict[row['family']] < 1300:
            # print(row['filename'], row['family'])
            times = 1300 // data_dict[row['family']]
            x_.append(get_matrix(os.path.join(path, row['filename'])))
            y_.append(row['family'])
            print("========== ", times, data_dict[row['family']])
            for _ in range(1, times):
                x_.append(get_matrix(os.path.join(path, row['filename']), noise=True))
                y_.append(row['family'])
        else:
            x_.append(get_matrix(os.path.join(path, row['filename'])))
            y_.append(row['family'])
    return x_, y_


def get_text_data(file_path):
    # D:\software\test\pe
    x_ = []
    y_ = []
    for index, name in enumerate(os.listdir(file_path)):
        # if index > 10:
        #     break
        print(name)
        x_.append(get_matrix(os.path.join(file_path, name)))
        y_.append(name)
    return x_, y_


def get_train():
    x, y = get_train_data("data/train_label.csv")
    print(y)
    f = h5py.File("data/data-train.h5", 'w')
    f.create_dataset("x_test", data=np.asarray(x))
    f.create_dataset("name", data=y)
    f.close()

    # load
    f = h5py.File('data/data-train.h5', 'r')
    X = f['x_test']
    Y = f['name']
    print(X)
    print(Y)


if __name__ == "__main__":
    get_train()
    # x, y = get_text_data(r'D:\software\test\pe')
    # # x, y = get_train_data("data/train_label.csv")
    # f = h5py.File("../data/data-test.h5", 'w')
    # f.create_dataset("x_test", data=np.asarray(x))
    # f.create_dataset("name", data=y)
    # f.close()
    #
    # # load
    # f = h5py.File('../data/data-test.h5', 'r')
    # X = f['x_test']
    # Y = f['name']
    # print(X)
    # print(Y)
