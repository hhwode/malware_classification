#!/usr/bin/env python
# -*- coding: UTF-8 -*-
"""
@Project    : malware_classification
@File       : eval.py
@IDE        : PyCharm
@Author     : Huang Hua
@Date       : 2021/9/7 9:40
"""
import h5py
from train import H5Dataset
import torch
from torch import nn
import torch.nn.functional as F
import pandas as pd


f = h5py.File("data/data-test-min.h5", 'r')
x = f['x_test']
y = f['name']
print(type(x), type(y))
# x = torch.from_numpy(x)
# y = torch.from_numpy(y)
test_datasets = H5Dataset(x, y)
all_data_size = len(test_datasets)
batch_size = 8
test_loader = torch.utils.data.DataLoader(test_datasets, batch_size=batch_size, shuffle=True)

model = torch.load("trained_models/vehicle-10_model_10.pth")
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")#若有gpu可用则用gpu
loss_function = nn.NLLLoss()
result = []
a = []
b = []
names = ["family_%s"%i for i in range(10)]
with torch.no_grad():
    model.eval()  # 验证
    for i, (inputs, name) in enumerate(test_loader):
        inputs = inputs.to(device).float()
        print(inputs, name)
        outputs = model(inputs)
        outputs = F.softmax(outputs, dim=1)
        print(outputs.data.numpy())
        a.extend(outputs.data.numpy().tolist())
        b.extend([str(j, encoding="utf-8") for j in name])
        # if i == 0:
        #     data = pd.DataFrame(outputs.data.numpy().tolist(), columns=names)
        #     data['filename'] = name
        # else:
        #     data.append(outputs.data.numpy().tolist())
        # print(data)
        # result.append((name.item(), outputs.item()))
c = ['filename']
c.extend(names)
data1 = pd.DataFrame(a, columns=names)
data2 = pd.DataFrame(b, columns=["filename"])
data = data2.join(data1)
print(data)
data.to_csv("data/submit.csv", index=False)

